
if [ -x /usr/bin/tput ] && [[ `tput colors` != "0" ]]; then
    color_prompt="yes"
elif [ -x /ffp/bin/tput ] && [[ `tput colors` != "0" ]]; then
    color_prompt="yes"
else
    color_prompt=
fi

if [[ "$color_prompt" == "yes" ]]; then
           BLUE="\033[0;34m"
          GREEN="\033[0;32m"
          WHITE="\033[1;37m"
            RED="\033[0;31m"
         YELLOW="\033[0;33m"
       NO_COLOR="\033[0m"
else
           BLUE=""
          GREEN=""
          WHITE=""
            RED=""
       NO_COLOR=""
fi

ok() {
  echo -e "${GREEN}OK:${NO_COLOR} $1"
}
fixme() {
  echo -e "${RED}FIXME:${NO_COLOR} $1"
}
note() {
  echo ""
  echo -e "${BLUE}NOTE:${NO_COLOR} $1"
}
warn() {
  echo ""
  echo -e "${YELLOW}NOTE:${NO_COLOR} $1"
}

# return 0 if version (parsed from string ' dd?.dd?.dd?') is equal or greater than
# the other provided version
check_version()
{
  version=$(echo $1 | sed -n 's/^[^0-9]*\([0-9.]\{1,\}\).*$/\1/p' )
  minimum=$2
  winner=$(echo -e "$version\n$minimum" | sed '/^$/d' | sort -V | tail -1)
  if [ $? -ne 0 ]; then
    winner=$(echo -e "$version\n$minimum" | sed '/^$/d' | sort -t . -k1,1nr -k2,2nr -k3,3nr | tail -1)
  fi
  if [ "$winner" = "$version" ]; then
    echo -e "  ${GREEN}OK${NO_COLOR}: $1"
  else
    echo -e "  ${RED}BACKLEVEL${NO_COLOR}: $1"
  fi
  [[ "$winner" = "$version" ]] && return 0
  return 1
}

get_deployment() {
  if [ -z ${GO_DEPLOYMENT+x} ] && [ -f .gameontext ]; then
    GO_DEPLOYMENT=$(cat .gameontext)
  fi
  GO_DEPLOYMENT=${GO_DEPLOYMENT-docker}
}

#configure docker command
DOCKER_CMD="docker"
if [ "$(uname)" != "Darwin" ] && [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]
then
    DOCKER_CMD="sudo docker"
fi

wrap_docker() {
  echo "
> ${DOCKER_CMD} $@"
  ${DOCKER_CMD} $@
}
