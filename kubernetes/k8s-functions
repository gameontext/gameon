BIN_DIR=$( cd "$SCRIPTDIR/../bin" && pwd )
GO_DIR=$( cd "$SCRIPTDIR/.." && pwd )
source $BIN_DIR/go-common

if sed --version >/dev/null 2>&1; then
  GNU_SED=1
else
  unset GNU_SED
fi

GO_DEPLOYMENT=kubernetes
COREPROJECTS="auth map mediator player proxy room swagger webapp"

wrap_kubectl() {
  echo "
> kubectl $@"
  kubectl $@
}

wrap_kubectl_go() {
  echo "
> kubectl -n gameon-system $@"
  kubectl -n gameon-system $@
}

wrap_exec_kubectl() {
  echo "
> kubectl $@"
  exec kubectl $@
}

wrap_helm() {
  echo "
> helm $@ ${GAMEON_HELM_TLS_FLAG}"
  helm $@ ${GAMEON_HELM_TLS_FLAG}
}

wrap_istioctl() {
  echo "
> istioctl $@"
  istioctl $@
}

wrap_exec_istioctl() {
  echo "
> istioctl $@"
  exec istioctl $@
}

wait_until_ready() {
  #+4 skips the blank line, >kubectl line, and kubectl headers
  while [ $(wrap_kubectl $@ | tail -n +4 | awk '{print $2;}' | awk -F "/" '{if($1==$2){print "OK";}else{print "BAD"}}' | grep BAD | wc -l) -gt 0 ]; do
    printf '.'
    sleep 5s
  done
}

sed_file() {
  if [ -f "${GO_DIR}/$2" ]; then
    if [ "${GNU_SED}" == "1" ]; then
      sed -i -e "$1" "${GO_DIR}/$2"
    else
      sed -i '' -e "$1" "${GO_DIR}/$2"
    fi
  fi
}

check_cluster_cfg() {
  # Remember/test previous values
  if [ -f .gameontext.kubernetes ]; then
    set_env

    OLD_INGRESS=GAMEON_INGRESS

    # Check against current context
    local kubectx=$(kubectl config current-context)
    if [ -n "${GAMEON_KUBECTL_CONTEXT}" ] && [ "${GAMEON_KUBECTL_CONTEXT}" != "${kubectx}" ]; then
      fixme "Kubernetes context has changed.
You were using kubectl context '${GAMEON_KUBECTL_CONTEXT}'
Your current kubectl context is '${kubectx}'"
      read -p "Do you want to re-prepare with the current kube context? [y] " answer
      if [[ $answer =~ [Yy] ]]; then
        reset_go
        prepare
      else
        exit 1
      fi
    elif ! test_cluster; then
      echo "> kubectl config current-context
${kubectx}"
      warn "Configured kubernetes cluster is not reachable."
      exit 1
    fi
  else
    fixme "Please ensure your kubernetes cluster has been prepared properly
    go-run setup"
    exit 1
  fi
}

reset_go() {
  rm -rf .gameontext.openssl
  rm -f .gameontext.*.pem
  rm -f kubernetes/kubectl/ingress.yaml
  rm -f kubernetes/kubectl/configmap.yaml
  rm -f kubernetes/chart/gameon-system/values.yaml
  echo '' > .gameontext.kubernetes
  unset GAMEON_KUBECTL_CONTEXT
  unset GAMEON_LOCAL
  unset GAMEON_INGRESS
}

prepare() {
  read -p "Do you want to use istio? [y] " answer
  if [ -z $answer ] || [[ $answer =~ [Yy] ]]; then
    GAMEON_USE_ISTIO=1
  else
    if [ "${GAMEON_USE_ISTIO}" ]; then
      purge_istio
    fi
    GAMEON_USE_ISTIO=
  fi

  read -p "Do you want to configure Game On! using helm? [y] " answer
  if [ -z $answer ] || [[ $answer =~ [Yy] ]]; then
    GAMEON_USE_HELM=1
  else
    GAMEON_USE_HELM=
  fi

  if ! check_versions; then
    exit 1
  fi

  verify_cluster
  test_local_kubernetes

  # create new files from templates if they don't already exist
  cp -n kubernetes/.template.kubectl.configmap.yaml kubernetes/kubectl/configmap.yaml
  cp -n kubernetes/.template.values.yaml kubernetes/chart/gameon-system/values.yaml

  init_namespace
  ok "Cluster prepared. Next: go-run up"
}

platform_up() {
  if ! kubectl get namespace gameon-system > /dev/null 2>&1; then
    init_namespace
  fi

  check_global_cert

  if [ "${GAMEON_USE_HELM}" ];  then
    wrap_helm install --name gameon-system --replace ./kubernetes/chart/gameon-system/
  else
    wrap_kubectl apply -R -f kubernetes/kubectl
  fi

  if [ "${GAMEON_USE_ISTIO}" ]; then
    wrap_kubectl apply -f kubernetes/istio/istio-gateway.yaml
    wrap_kubectl apply -f kubernetes/istio/istio-gatewayVirtualService.yaml
  fi

  echo 'To wait for readiness: go-run wait'
}

platform_down() {
  echo "Stopping ${GAMEON_INGRESS}"
  if wrap_kubectl get namespace gameon-system 2>/dev/null; then
    if [ "${GAMEON_USE_HELM}" ];  then
      wrap_helm delete --purge gameon-system --timeout 10
    else
      wrap_kubectl delete -R -f kubernetes/kubectl --grace-period=10
    fi

    if [ "${GAMEON_USE_ISTIO}" ]; then
      wrap_kubectl delete -f kubernetes/istio/istio-gateway.yaml --grace-period=10
      wrap_kubectl delete -f kubernetes/istio/istio-gatewayVirtualService.yaml --grace-period=10
    fi

    ok "Removing the namespace to ensure things are cleaned up, this might take a few minutes"
    wrap_kubectl delete namespace gameon-system
  else
    ok "gameon-system stopped"
  fi

  if wrap_kubectl get namespace istio-system 2>/dev/null; then
    read -p "Do you want to remove istio from your cluster? [y] " answer
    if [ -z $answer ] || [[ $answer =~ [Yy] ]]; then
      purge_istio
    fi
  else
    ok "istio-system stopped"
  fi
}

init_namespace() {
  if ! kubectl get namespace gameon-system > /dev/null 2>&1; then
    wrap_kubectl create namespace gameon-system
    if [ $? -ne 0 ]; then
      fixme "unable to  create gameon-system namespace"
      exit 1
    fi

    if [ "${GAMEON_USE_HELM}" ] && wrap_helm version --client| grep -q "+icp"; then
      echo "Applying kube pod security policy for go namespace"
      wrap_kubectl apply -f kubernetes/icp-psp.yaml
    fi
  else
    ok "gameon-system namespace found"
  fi

  if [ "${GAMEON_USE_ISTIO}" ]; then
    if ! kubectl get namespace istio-system > /dev/null 2>&1; then
      install_istio
    elif [ -z ${INGRESS_PORT+x} ]; then
      find_istio_ingress
    fi

    if kubectl describe namespace gameon-system | grep -q istio; then
      ok "gameon-system already has the istio-injection=enabled label"
    else
      wrap_kubectl label namespace gameon-system istio-injection=enabled
    fi
    # disable kubernetes ingress
    sed_file '/^ *ingress:/,/^ *[^:]*:/ s/enabled: .*/enabled: false/' kubernetes/chart/gameon-system/values.yaml
    cp -n kubernetes/.template.istio.istio-gateway.yaml kubernetes/istio/istio-gateway.yaml
  else
    if [ "${GAMEON_USE_HELM}" ]; then
      install_tiller
    fi
    if [ -z ${INGRESS_PORT+x} ]; then
      find_k8s_ingress
    fi
    # Enable kubernetes ingress
    cp -n kubernetes/.template.kubectl.ingress.yaml kubernetes/kubectl/ingress.yaml
    sed_file '/^ *ingress:/,/^ *[^:]*:/ s/enabled: .*/enabled: true/' kubernetes/chart/gameon-system/values.yaml
  fi

  create_certificate

  # Ingress Secret
  sed_file "s/secretName: .*$/secretName: ${GAMEON_INGRESS_SECRET}/" kubernetes/chart/gameon-system/values.yaml
  sed_file "s/secretName: .*$/secretName: ${GAMEON_INGRESS_SECRET}/" kubernetes/kubectl/ingress.yaml

  # Front Door
  local GAME_FRONT_DOOR=${GAMEON_INGRESS}:${SECURE_INGRESS_PORT}

  sed_file "s/frontDoor: .*$/frontDoor: ${GAME_FRONT_DOOR}/" kubernetes/chart/gameon-system/values.yaml
  sed_file "s/frontDoorHost: .*$/frontDoorHost: ${GAMEON_INGRESS}/" kubernetes/chart/gameon-system/values.yaml

  sed_file "s/RECROOM_SERVICE_URL: .*$/RECROOM_SERVICE_URL: wss:\/\/${GAME_FRONT_DOOR}\/rooms/" kubernetes/kubectl/configmap.yaml
  sed_file "s/RECROOM_SERVICE_URL: .*$/RECROOM_SERVICE_URL: wss:\/\/${GAME_FRONT_DOOR}\/rooms/" kubernetes/chart/gameon-system/values.yaml

  sed_file "s/FRONT_END_SUCCESS_CALLBACK:.*$/FRONT_END_SUCCESS_CALLBACK: https:\/\/${GAME_FRONT_DOOR}\/#\/login\/callback/" kubernetes/kubectl/configmap.yaml
  sed_file "s/FRONT_END_FAIL_CALLBACK:.*$/FRONT_END_FAIL_CALLBACK: https:\/\/${GAME_FRONT_DOOR}\/#\/login?login_failed/" kubernetes/kubectl/configmap.yaml
  sed_file "s/FRONT_END_AUTH_URL:.*$/FRONT_END_AUTH_URL: https:\/\/${GAME_FRONT_DOOR}\/auth/" kubernetes/kubectl/configmap.yaml

  # Gameon Ingress (host)
  ## Holy sed magic.
  ## Replace hosts with ${GAMEON_INGRESS}. Match hosts:, and then skip that line (/n), and replace the next one.
  sed_file "/^ *- hosts:/,/^ *[^:]*:/ {
     /^ *- hosts:/n
     s/- .*$/- ${GAMEON_INGRESS}/
  }" kubernetes/chart/gameon-system/values.yaml
  sed_file "/^ *- hosts:/,/^ *[^:]*:/ {
     /^ *- hosts:/n
     s/- .*$/- ${GAMEON_INGRESS}/
  }" kubernetes/kubectl/ingress.yaml
  sed_file "/^ *hosts:/,/^ *[^:]*:/ {
     /^ *hosts:/n
     s/- .*$/- ${GAMEON_INGRESS}/
  }" kubernetes/istio/istio-gateway.yaml

  # Replace rules[host]
  sed_file "s/- host: .*$/- host: ${GAMEON_INGRESS}/" kubernetes/kubectl/ingress.yaml

  ok "Updated templates with Ingress hosts and ports: ${GAMEON_INGRESS}, ${INGRESS_PORT}, and ${SECURE_INGRESS_PORT}"
}

test_cluster() {
  kubectl --request-timeout 2s cluster-info > /dev/null 2>&1
  return $?
}

verify_cluster() {
  if ! test_cluster; then
    fixme "Unable to retrieve cluster information.

You need to set up a Kubernetes cluster and provide its configuration
to kubectl. Verify that the Kubernetes cluster configuration is correct
using 'kubectl cluster-info'.

If using virtual machine(s), ensure you have at least 4GB (preferably 8GB)
of RAM to run the entire system, e.g. 'minikube start --memory 8192'
"
    exit 1
  fi
  ok "configured Kubernetes cluster found"
}

get_tiller() {
  TILLER=$(kubectl get po -n kube-system | grep tiller-deploy | awk '{print $1;}' | xargs)
  return $(test -n "$TILLER")
}

get_ingress_gateway() {
  INGRESS_GATEWAY=$(kubectl get po -n istio-system | grep ingressgateway | awk '{print $1;}' | xargs)
  return $(test -n "$INGRESS_GATEWAY")
}

install_tiller() {
  if ! get_tiller; then
    wrap_helm init
    ok "Tiller initialized ... "
    get_tiller
    wait_until_ready -n kube-system get po $TILLER
  fi
}

install_istio() {
  if [[ ! -z ${ISTIO_INSTALL+x} ]] && [ -d ${ISTIO_INSTALL} ]; then
    read -p "Try to install istio in your cluster? [y] " answer
  else
    answer=n
  fi

  if [ -z $answer ] || [[ $answer =~ [Yy] ]]; then
    cd ${ISTIO_INSTALL}

    if ! kubectl get -n kube-system serviceaccounts tiller > /dev/null 2>&1; then
      wrap_kubectl create -f install/kubernetes/helm/helm-service-account.yaml
    else
      ok "tiller service account already exists"
    fi

    if ! get_tiller; then
      wrap_helm init --service-account tiller
      ok "Tiller initialized ... "
      until get_tiller; do
        sleep 3
      done
      wait_until_ready -n kube-system get po $TILLER
    else
      ok "Using pre-existing Tiller ... "
    fi

    if [ ! -z ${GAMEON_LOCAL+x} ]; then
      note "
When running Istio on minikube or in docker-for-desktop, a NodePort is used instead
of an external load balancer."

      wrap_helm install install/kubernetes/helm/istio \
          --name istio --namespace istio-system \
          --set gateways.istio-ingressgateway.type=NodePort \
          --set gateways.istio-egressgateway.type=NodePort
    else
      wrap_helm install install/kubernetes/helm/istio \
          --name istio --namespace istio-system
    fi

    until get_ingress_gateway; do
      sleep 3
    done

    echo "Waiting for Istio Ingress gateway: $INGRESS_GATEWAY"
    wait_until_ready -n istio-system get po $INGRESS_GATEWAY
    find_istio_ingress

    cd ${GO_DIR}
  else
    find_k8s_ingress
    echo ""
    fixme "Install istio into your cluster the steps should look something like:

    cd ${ISTIO_INSTALL}
    kubectl apply -f install/kubernetes/helm/istio/templates/crds.yaml
    kubectl create -f install/kubernetes/helm/helm-service-account.yaml
    helm init --service-account tiller
    helm install install/kubernetes/helm/istio --name istio --namespace istio-system

See: https://istio.io/docs/setup/kubernetes/helm-install/

Run prep again once Istio has been installed in your cluster.

    go-run setup"
    exit 1
  fi
}

purge_istio() {
  wrap_helm delete --purge istio
  wrap_kubectl delete namespace istio-system
}

test_local_kubernetes() {
  local kubectx=$(kubectl config current-context)

  if [[ $kubectx =~ docker-for-desktop ]]; then
    GAMEON_LOCAL=docker
    GAMEON_INGRESS=localhost
  fi

  certauth=$(kubectl config view -o jsonpath='{.clusters[?(@.name == "'${kubectx}'")].cluster.certificate-authority}')
  if [[ $certauth =~ minikube ]]; then
    ok "`minikube addons enable ingress`"
    echo "Detected minikube, using 'minikube ip'"
    GAMEON_LOCAL=minikube
    GAMEON_INGRESS=gameon.$(minikube ip).xip.io
  fi

  if [ ! -z ${GAMEON_LOCAL+x} ]; then
    GAMEON_INGRESS_SECRET=front-door-certs
    GAMEON_INTERNAL_IPRANGE="10.0.0.1/24"
  fi
}

find_istio_ingress() {
  if [ ! -z ${GAMEON_LOCAL+x} ]; then
    INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
    SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}')
    ok "Local Istio Ingress ${GAMEON_INGRESS} using port ${INGRESS_PORT} and secure port ${SECURE_INGRESS_PORT}"
  else
    # TODO: verify Istio ingress behavior on IKS
    GAMEON_INGRESS=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
    GAMEON_INGRESS_SECRET=
    if [ -z ${GAMEON_INGRESS+x} ]; then
      fixme "An external IP was not assigned to the Istio Ingress Gateway. An external load balancer may not be supported."
      exit 1
    fi
    INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].port}')
    SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].port}')

    if [ -z ${GAMEON_INTERNAL_IPRANGE+x} ]; then
      read -p 'Enter cluster internal IP Range (e.g. 10.0.0.1/24): ' GAMEON_INTERNAL_IPRANGE
    fi

    ok "Istio Ingress: ${GAMEON_INGRESS} using port ${INGRESS_PORT} and secure port ${SECURE_INGRESS_PORT}"
  fi

  echo "
export GAMEON_USE_ISTIO=${GAMEON_USE_ISTIO}
export GAMEON_USE_HELM=${GAMEON_USE_HELM}
export GAMEON_HELM_TLS_FLAG=${GAMEON_HELM_TLS_FLAG}
export GAMEON_LOCAL=${GAMEON_LOCAL}
export GAMEON_INGRESS=${GAMEON_INGRESS}
export GAMEON_INGRESS_SECRET=${GAMEON_INGRESS_SECRET}
export GAMEON_KUBECTL_CONTEXT=$(kubectl config current-context)
export GAMEON_INTERNAL_IPRANGE=${GAMEON_INTERNAL_IPRANGE}
export INGRESS_PORT=${INGRESS_PORT}
export SECURE_INGRESS_PORT=${SECURE_INGRESS_PORT}
export ISTIO_INSTALL=${ISTIO_INSTALL}
  " > ${GO_DIR}/.gameontext.kubernetes

  set_env
}

find_k8s_ingress() {
  if [ ! -z ${GAMEON_LOCAL+x} ]; then
    ok "Local Kubernetes Ingress ${GAMEON_INGRESS} using port 80 and secure port 443"
  elif [ -z ${GAMEON_INGRESS+x} ]; then
    #  PROMPT FOR CLUSTER INFORMATION
    read -p 'Enter ingress hostname (or subdomain): ' GAMEON_INGRESS
    read -p 'Enter ingress secret (or enter if none): ' GAMEON_INGRESS_SECRET
    read -p 'Enter cluster internal IP Range (e.g. 10.0.0.1/24): ' GAMEON_INTERNAL_IPRANGE
  fi

  echo "
export GAMEON_USE_ISTIO=${GAMEON_USE_ISTIO}
export GAMEON_USE_HELM=${GAMEON_USE_HELM}
export GAMEON_HELM_TLS_FLAG=${GAMEON_HELM_TLS_FLAG}
export GAMEON_LOCAL=${GAMEON_LOCAL}
export GAMEON_INGRESS=${GAMEON_INGRESS}
export GAMEON_INGRESS_SECRET=${GAMEON_INGRESS_SECRET}
export GAMEON_KUBECTL_CONTEXT=$(kubectl config current-context)
export GAMEON_INTERNAL_IPRANGE=${GAMEON_INTERNAL_IPRANGE}
export INGRESS_PORT=80
export SECURE_INGRESS_PORT=443
export ISTIO_INSTALL=${ISTIO_INSTALL}
  " > ${GO_DIR}/.gameontext.kubernetes

  set_env
}

define_ingress() {
  if [ "${GAMEON_USE_ISTIO}" ]; then
    find_istio_ingress
  else
    find_k8s_ingress
  fi
}

create_certificate() {
  local mtime=
  if [ -f .gameontext.cert.pem ]; then
    mtime=$(date -r .gameontext.cert.pem)
  fi

  ${BIN_DIR}/gen-certificate.sh "${GO_DIR}" "${GAMEON_INGRESS}"

  local mtime2=$(date -r .gameontext.cert.pem)
  if [ "$mtime" != "$mtime2" ]; then
    ok "Created a new certificate (.gameontext.cert.pem)"
    check_global_cert force
  fi
}

check_global_cert() {
  wrap_kubectl_go get secret global-cert 2>/dev/null
  local exists=$?

  if [ $# -gt 0 ] && [ $exists -eq 0 ]; then
    wrap_kubectl_go delete secret global-cert
    ok "Deleted old global-cert secret in gameon-system namespace"
    exists=1
  fi

  if [ $exists -eq 1 ]; then
    wrap_kubectl_go create secret generic global-cert --from-file=cert.pem=.gameontext.cert.pem
    ok "Created global-cert secret in gameon-system namespace"
  else
    ok "Found global-cert secret in gameon-system namespace"
  fi

  wrap_kubectl_go get secret front-door-certs 2>/dev/null
  local exists=$?

  if [ $# -gt 0 ] && [ $exists -eq 0 ]; then
    wrap_kubectl_go delete secret front-door-certs
    ok "Deleted old front-door-certs secret in gameon-system namespace"
    exists=1
  fi

  if [ $exists -eq 1 ]; then
    wrap_kubectl_go create secret tls front-door-certs --cert=.gameontext.onlycert.pem --key=.gameontext.onlykey.pem
    ok "Created front-door-certs secret in gameon-system namespace"
  else
    ok "Found front-door-certs secret in gameon-system namespace"
  fi

  if [ "${GAMEON_USE_ISTIO}" ]; then
    wrap_kubectl -n istio-system get secret istio-ingressgateway-certs 2>/dev/null
    local exists=$?

    if [ $# -gt 0 ] && [ $exists -eq 0 ]; then
      wrap_kubectl -n istio-system delete secret istio-ingressgateway-certs
      ok "Deleted old istio-ingressgateway-certs secret in istio-system namespace"
      exists=1
    fi

    if [ $exists -eq 1 ]; then
      wrap_kubectl -n istio-system create secret tls istio-ingressgateway-certs --cert=.gameontext.onlycert.pem --key=.gameontext.onlykey.pem
      ok "Created istio-ingressgateway-certs secret in istio-system namespace"
    else
      ok "Found istio-ingressgateway-certs secret in istio-system namespace"
    fi
  fi
}

rebuild() {
  PROJECTS=''

  while [[ $# -gt 0 ]]; do
    case "$1" in
      all) PROJECTS="$COREPROJECTS $PROJECTS";;
      *) PROJECTS="$1 $PROJECTS";;
    esac
    shift
  done

  echo "Building projects [$PROJECTS]"
  for project in $PROJECTS
  do
    if [ ! -d "${project}" ]; then
      continue
    fi

    echo
    echo "*****"
    cd "$project"

    if [ -e "build.gradle" ]; then
      echo "Building project ${project} with gradle"
      ./gradlew build --rerun-tasks
      rc=$?
      if [ $rc != 0 ]; then
        echo Gradle build failed. Please investigate, Game On! is unlikely to work until the issue is resolved.
        exit 1
      fi
      echo "Building docker image for ${project}"
      ./gradlew build image
    elif [ "${project}" == "webapp" ] && [ -f build.sh ]; then
      echo "webapp source present:  $(ls -d ${GO_DIR}/webapp/app)"
      ./build.sh
      ./build.sh final
    elif [ -f Dockerfile ]; then
      echo "Re-building docker image for ${project}"
      ${DOCKER_CMD} build -t gameontext/gameon-${project} .
    fi

    cd ${GO_DIR}
  done
}

check_versions() {
  local QUIT=0
  local VERSION=''
  echo ""
  echo "***********  "
  echo "Game On! Text requires:"

  echo "* Docker CE version 17.06 or greater"
  VERSION=$(docker -v)
  check_version "${VERSION}" 17.06.0

  echo "* kubectl version 1.10.0 or greater"
  if ! which kubectl > /dev/null; then
    echo -e "  ${RED}MISSING${NO_COLOR}: kubectl not found"
    echo "    kubectl either isn't installed, or isn't available on your PATH"
    echo "        PATH=$PATH"
    echo ""
    echo " Try one of the following: "
    echo ""
    echo "  * Set up kubectl:"
    echo "        https://kubernetes.io/docs/tasks/tools/install-kubectl/"
    echo "  * Enable Kubernetes in Docker for Mac:"
    echo "        https://docs.docker.com/docker-for-mac/#kubernetes"
    echo "  * Enable Kubernetes in Docker for Windows:"
    echo "        https://docs.docker.com/docker-for-windows/#kubernetes"
    echo ""
    QUIT=1
  else
    VERSION=$(kubectl version --client --short)
    check_version "${VERSION}" 1.10.0
  fi

  if which minikube > /dev/null; then
    echo "* minikube version 0.28.0 or later"
    VERSION=$(minikube version)
    check_version "${VERSION}" 0.28.0
  fi

  if [ "${GAMEON_USE_ISTIO}" ] || [ "${GAMEON_USE_HELM}" ]; then
    local helmVersion=2.10.0
    echo "* helm version ${helmVersion} or greater"
    if ! which helm > /dev/null; then
      echo -e "  ${RED}MISSING${NO_COLOR}: helm not found"
      echo "    helm either isn't installed, or isn't available on your PATH"
      echo "    Set up the helm client using the following instructions:"
      echo "        https://docs.helm.sh/using_helm/#installing-helm"
      echo "    Make sure helm is executable by you, and on your path"
      echo "        PATH=$PATH"
      QUIT=1
    else
      VERSION=$(helm version --client --short)
      check_version "${VERSION}" ${helmVersion}
      echo ${VERSION} | grep "+icp" > /dev/null 2>&1
      RC=$?
      if [ $RC -eq 0 ]; then
        echo "* ICP detected in helm client string, testing if tls required"

        helm version > /dev/null 2>&1
        RC=$?
        if [ $RC -ne 0 ]; then
          helm version --tls > /dev/null 2>&1
          RC=$?
          if [ $RC -eq 0 ]; then
            echo "  - helm requires --tls option"
            export GAMEON_HELM_TLS_FLAG="--tls"
          else
            export GAMEON_HELM_TLS_FLAG=
            kubectl cluster-info > /dev/null 2>&1
            RC=$?
            if [ $RC -ne 0 ]; then
              echo " - Error: helm requires a working kubectl config, please ensure your kubectl"
              echo "          is configured correctly to talk to your cluster"
              echo "          If using ICP, your authentication may have expired."
            else
              echo "  - Error: 'helm version' did not return successfully with or without --tls"
            fi
          fi
        else
         echo "  - tls not required"
        fi
      fi
    fi
  fi

  if [ "${GAMEON_USE_ISTIO}" ]; then
    get_istio_path

    echo "* istio version 1.0.0 or greater"
    if ! which istioctl > /dev/null; then
      echo -e "  ${RED}MISSING${NO_COLOR}: istioctl not found"
      echo "    istioctl either isn't installed, or isn't available on your PATH"
      echo "    Set up istioctl using the following instructions:"
      echo "        https://istio.io/docs/setup/kubernetes/download-release/"
      echo "    Make sure istioctl is executable by you, and is either:"
      echo "    1) on your path (including /bin dir):"
      echo "        PATH=$PATH"
      echo "    2) in the .gameontext.kubernetes file (not including /bin dir):"
      echo "        \$ echo ISTIO_INSTALL=<path-to-istio-release-dir> >> ${GO_DIR}/.gameontext.kubernetes"
      QUIT=1
    else
      VERSION=$(istioctl version --short)
      check_version "${VERSION}" 1.0.0

      local INSTALL=$(cd $(dirname $(which istioctl))/.. && pwd)
      if [ -d ${INSTALL}/install/kubernetes/helm ]; then
        ISTIO_INSTALL=${INSTALL}
      else
        echo -e "  ${RED}MISSING${NO_COLOR}: istio kubernetes helm directory not found"
        echo "    The istio install directory contains templates used for setup / teardown using helm"
        echo "    If you aren't using istioctl from an extracted istio release,"
        echo "    please set the path into the .gameontext.kubernetes file:"
        echo "        \$ echo ISTIO_INSTALL=<path-to-istio-release-dir> >> ${GO_DIR}/.gameontext.kubernetes"
        echo "    Specifically, the specified directory should contain istio helm templates"
        echo "    under install/kubernetes/helm"
      fi
    fi
  fi

  echo "***********  "
  echo ""
  return $QUIT
}

set_env() {
  source .gameontext.kubernetes
  set_istio_path
}

get_istio_path() {
  eval $(grep ISTIO_INSTALL .gameontext.kubernetes 2>/dev/null)
  set_istio_path
}

set_istio_path() {
  if [ -n "${ISTIO_INSTALL}" ]; then
    if ! grep -q ${ISTIO_INSTALL} ${PATH} 2>/dev/null; then
      PATH=${ISTIO_INSTALL}/bin:${PATH}
    fi
  fi
}
