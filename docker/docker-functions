BIN_DIR=$( cd "$SCRIPTDIR/../bin" && pwd )
IMG_DIR=$( cd "$SCRIPTDIR/../images" && pwd )
GO_DIR=$( cd "$SCRIPTDIR/.." && pwd )
source $BIN_DIR/go-common

PLATFORM="kafka redis couchdb util"
COREPROJECTS="auth map mediator player proxy room swagger webapp"

OVERRIDE=
if [ -f $SCRIPTDIR/docker-compose.override.yml ]
then
  OVERRIDE="-f $SCRIPTDIR/docker-compose.override.yml"
fi

if [ -z ${DOCKER_MACHINE_NAME+x} ]; then
  export DOCKER_MACHINE_NAME=
fi

#configure docker compose command
COMPOSE="docker-compose -f $SCRIPTDIR/docker-compose.yml ${OVERRIDE}"
if [ "$(uname)" != "Darwin" ] && [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]
then
    COMPOSE="sudo DOCKER_MACHINE_NAME=${DOCKER_MACHINE_NAME} ${COMPOSE}"
fi

wrap_compose() {
  echo "
> ${COMPOSE} $@"
  ${COMPOSE} $@
}

docker_versions() {
  echo ""
  echo "***********  "
  echo "Game On! Text requires:"

  DOCKER_VERSION=$(docker -v)
  echo "* Docker CE version 17.06 or greater"
  check_version "${DOCKER_VERSION}" 17.06.0

  DOCKER_COMPOSE_VERSION=$(docker-compose -v)
  echo "* Docker Compose version 1.15.0 or greater"
  check_version "${DOCKER_COMPOSE_VERSION}" 1.15.0

  echo "***********  "
  echo ""
}

# Some environment variable munging to sort what the external host/port will be
# (that can  be used in scripts to echo how to reach the running game)
get_gameontext_hostip() {
  GAMEON_HOST=127.0.0.1
  HTTP_HOSTPORT=127.0.0.1 #80
  HTTPS_HOSTPORT=127.0.0.1 #443

  # Docker machine / Docker toolbox is less common, but did allow use of several
  # different machines side-by-side. Here, we are checking if it is set (setting
  # a value of "empty" if it is not)
  # Our Vagrantfile defines this variable as "vagrant" so we can handle that
  # case, too.
  NAME=${DOCKER_MACHINE_NAME-empty}

  if [ "$NAME" == "vagrant" ]; then
    # Our Vagrant configuration maps guest ports to localhost
    HTTP_HOSTPORT=127.0.0.1:9980
    HTTPS_HOSTPORT=127.0.0.1:9943

  elif [ "${NAME}" != "empty" ] && [ "${NAME}" != "" ]; then
    GAMEON_HOST=$(docker-machine ip $NAME)
    rc=$?
    if [ $rc != 0 ] || [ -z ${DOCKER_HOST} ]
    then
     echo "Is your docker host running? Did you start docker-machine, e.g.
  docker-machine start default
  eval \$(docker-machine env default)"
      exit 1
    fi
    HTTP_HOSTPORT=${GAMEON_HOST}
    HTTPS_HOSTPORT=${GAMEON_HOST}
  fi

  export GAMEON_HOST HTTP_HOSTPORT HTTPS_HOSTPORT
}

build_webapp() {
  echo "webapp source present:  $(ls -d ${GO_DIR}/webapp/app)"
  if [ -f ${GO_DIR}/webapp/build.sh ]
  then
    echo "** webapp source exists. **"
    echo "Building using ${GO_DIR}/webapp/build.sh"
    ${GO_DIR}/webapp/build.sh
    rc=$?
    if [ $rc != 0 ]
    then
      echo Node build failed. Please investigate, Game On! is unlikely to work until the issue is resolved.
      exit 1
    fi

    # Build the final Docker image
    wrap_compose build webapp
  else
    echo "******"
    echo "No webapp source, using image"
    echo "******"
  fi
}

ensure_keystore() {
  ## Creating Keystores
  # Docker volume operations need absolute paths
  DOCKERPATHPREFIX=
  wrap_docker version -f '{{.Client.Os}}' | grep windows
  rc=$?
  if [ $rc -eq 0 ]
  then
    DOCKERPATHPREFIX=/
    sed -i 's/\r//' ${BIN_DIR}/gen-keystore.sh
  fi

  if [[ "$(docker images -q gameon-util 2> /dev/null)" == "" ]]; then
    wrap_compose build util
  fi

  # If the keystore volume doesn't exist, then we should generate
  # the keystores we need for local signed JWTs to work
  wrap_docker volume inspect keystore &> /dev/null
  rc=$?
  if [ $rc -ne 0 ]
  then
    wrap_docker volume create --name keystore
    # Generate keystore
    wrap_compose run -T\
      -v keystore:/tmp/keystore \
      -v ${DOCKERPATHPREFIX}${BIN_DIR}/gen-keystore.sh:/tmp/gen-keystore.sh \
      -w /tmp --rm util bash ./gen-keystore.sh ${GAMEON_HOST}
    # Copy ltpa.keys
    wrap_compose run -T\
      -v keystore:/tmp/keystore \
      -v ${DOCKERPATHPREFIX}${IMG_DIR}/ltpa.keys:/tmp/ltpa.keys \
      -w /tmp --rm util cp ltpa.keys keystore/ltpa.keys
  fi

  ## Ensure volume exists for node modules (avoid putting in filesystem because of OS differences)
  wrap_docker volume inspect webapp-node-modules &> /dev/null
  rc=$?
  if [ $rc -ne 0 ]
  then
    wrap_docker volume create --name webapp-node-modules
  fi
}

platform_up() {
  ensure_keystore

  FOUND=$(${DOCKER_CMD} ps --format="{{.Names}}")
  if [ "$FOUND" != "" ]; then

    if [ "$2" != "--force" ]; then
      OK=1
      for svc in $PLATFORM; do
        echo $FOUND | grep -qs $svc
        if [ $? != 0 ]; then
          OK=0
        fi
      done

      if [ $OK == 1 ]; then
        return 0
      fi
    fi
  fi

  echo "Starting platform services ${PLATFORM}"

  # Start new ones
  wrap_compose up -d ${PLATFORM}
}

platform_down() {
  echo "Stopping control plane services..."
  wrap_compose kill  ${PLATFORM}
  wrap_compose rm -f ${PLATFORM}
}

reset_kafka() {
  echo "Stop kafka and dependent services"
  wrap_compose stop kafka ${PROJECTS}
  wrap_compose kill kafka ${PROJECTS}
  wrap_composerm -f kafka ${PROJECTS}
  echo "Resetting kafka takes some time ... "
  echo "Sleep 30"
  sleep 30
  echo "Start Kafka"
  wrap_compose up -d kafka
  echo "Sleep 60"
  sleep 60
  wrap_compose logs --tail="5" kafka
  echo "Rebuild projects"
  wrap_compose build  ${PROJECTS}
  wrap_compose up -d  ${PROJECTS}
  wrap_compose logs --tail="5" -f  ${PROJECTS}
}
