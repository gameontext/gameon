BIN_DIR=$( cd "$SCRIPTDIR/../bin" && pwd )
GO_DIR=$( cd "$SCRIPTDIR/.." && pwd )
source $BIN_DIR/go-common


PLATFORM="kafka redis couchdb"
COREPROJECTS="auth map mediator player proxy room swagger webapp"

OVERRIDE=
if [ -f $SCRIPTDIR/docker-compose.override.yml ]
then
  OVERRIDE="-f $SCRIPTDIR/docker-compose.override.yml"
fi

#configure docker compose command
COMPOSE="docker-compose -f $SCRIPTDIR/docker-compose.yml ${OVERRIDE}"
DOCKER_CMD="docker"
if [ "$(uname)" != "Darwin" ] && [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]
then
    COMPOSE="sudo ${COMPOSE}"
    DOCKER_CMD="sudo docker"
fi

build_webapp() {
  if [ -d ${GO_DIR}/webapp/app ]
  then
    echo "** webapp source exists. **"
    if [ "${OVERRIDE}" == "" ]
    then
      echo "Copy the `docker/docker-compose.override.yml.example` file to `docker/docker-compose.override.yml`,
 and uncomment the section for the service you want to change. For webapp, that includes webapp-build."
    elif grep -q webapp-build $SCRIPTDIR/docker-compose.override.yml
    then
      echo "Building using ${COMPOSE} run webapp-build"
      ${COMPOSE} run --rm webapp-build
      rc=$?
      if [ $rc != 0 ]
      then
        echo Node build failed. Please investigate, Game On! is unlikely to work until the issue is resolved.
        exit 1
      fi

      # Build the final Docker image
      ${COMPOSE} build webapp
    else
      echo "The web front-end is compiled and run in two different containers."
      echo "******"
      echo "Ensure that both webapp and webapp-build exist in docker-compose.override.yml"
      echo "as shown in docker-compose.override.yml.example"
      echo "******"
    fi
  fi
}

ensure_keystore() {
  ## Creating Keystores
  # Docker volume operations need absolute paths
  DOCKERPATHPREFIX=
  ${DOCKER_CMD} version -f '{{.Client.Os}}' | grep windows
  rc=$?
  if [ $rc -eq 0 ]
  then
    DOCKERPATHPREFIX=/
    sed -i 's/\r//' ${BIN_DIR}/gen-keystore.sh
  fi

  # If the keystore volume doesn't exist, then we should generate
  # the keystores we need for local signed JWTs to work
  ${DOCKER_CMD} volume inspect keystore &> /dev/null
  rc=$?
  if [ $rc -ne 0 ]
  then
    ${DOCKER_CMD} volume create --name keystore
    # Dump cmd..
    echo ${DOCKER_CMD} run \
      -v keystore:/tmp/keystore \
      -v ${DOCKERPATHPREFIX}${BIN_DIR}/gen-keystore.sh:/tmp/gen-keystore.sh \
      -w /tmp --rm ibmjava bash ./gen-keystore.sh ${IP}
    # Generate keystore
    ${DOCKER_CMD} run \
      -v keystore:/tmp/keystore \
      -v ${DOCKERPATHPREFIX}${BIN_DIR}/gen-keystore.sh:/tmp/gen-keystore.sh \
      -w /tmp --rm ibmjava bash ./gen-keystore.sh ${IP}
  fi
}

platform_up() {
  ensure_keystore

  FOUND=$(${DOCKER_CMD} ps --format="{{.Names}}")
  if [ "$FOUND" != "" ]; then

    if [ "$2" != "--force" ]; then
      OK=1
      for svc in $PLATFORM; do
        echo $FOUND | grep -qs $svc
        if [ $? != 0 ]; then
          OK=0
        fi
      done

      if [ $OK == 1 ]; then
        return 0
      fi
    fi
  fi

  echo "Starting platform services ${PLATFORM}"

  # Start new ones
  ${COMPOSE} up -d ${PLATFORM}
}

platform_down() {
  echo "Stopping control plane services..."
  ${COMPOSE} kill  ${PLATFORM}
  ${COMPOSE} rm -f ${PLATFORM}
}

reset_kafka() {
  echo "Stop kafka and dependent services"
  ${COMPOSE} stop kafka ${PROJECTS}
  ${COMPOSE} kill kafka ${PROJECTS}
  ${COMPOSE} rm -f kafka ${PROJECTS}
  echo "Resetting kafka takes some time (quiescing, making sure things are dead and that there are no zombies)"
  echo "Sleep 30"
  sleep 30
  echo "Start Kafka"
  ${COMPOSE} up -d kafka
  echo "Sleep 60"
  sleep 60
  ${COMPOSE} logs --tail="5" kafka
  echo "Rebuild projects"
  ${COMPOSE} build  ${PROJECTS}
  ${COMPOSE} up -d  ${PROJECTS}
  ${COMPOSE} logs --tail="5" -f  ${PROJECTS}
}
